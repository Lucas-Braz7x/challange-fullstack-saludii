// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Receita {
  id           String    @id @default(cuid())
  titulo       String
  ingredientes String
  modoPreparo  String    @map("modo_preparo")
  tempoPreparo Int       @map("tempo_preparo")
  porcoes      Int
  notaPessoal  String?   @map("nota_pessoal")
  slug         String    @unique
  curtidas     Int?      @default(0)
  createdAt    DateTime? @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  // Relacionamentos
  categorias CategoriaReceita[]
  tags       TagReceita[]

  @@index([titulo])
  @@index([ingredientes])
  @@map("receita")
}

model Categoria {
  id       String             @id @default(cuid())
  nome     String             @unique
  receitas CategoriaReceita[]

  @@index([nome])
  @@map("categoria")
}

model Tag {
  id       String       @id @default(cuid())
  nome     String       @unique
  receitas TagReceita[]

  @@index([nome])
  @@map("tag")
}

model CategoriaReceita {
  receitaId   String @map("receita_id")
  categoriaId String @map("categoria_id")

  receita   Receita   @relation(fields: [receitaId], references: [id])
  categoria Categoria @relation(fields: [categoriaId], references: [id])

  @@id([receitaId, categoriaId])
  @@map("categoria_receita")
}

model TagReceita {
  receitaId String @map("receita_id")
  tagId     String @map("tag_id")

  receita Receita @relation(fields: [receitaId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([receitaId, tagId])
  @@map("tag_receita")
}
